
Процедура ПриЗаписиДокументаОбменДаннымиПриЗаписи(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() = Неопределено Тогда
		ВыборкаУзлов = ПланыОбмена.Кухни.Выбрать();
		Пока ВыборкаУзлов.Следующий() Цикл
			Если ВыборкаУзлов.Ссылка = ПланыОбмена.Кухни.ЭтотУзел() Тогда
				Продолжить;
			КонецЕсли;
			Если Источник.Склад <> ВыборкаУзлов.Склад Тогда
				Продолжить;
			КонецЕсли;
			ЗарегистрироватьДокумент(ВыборкаУзлов.Ссылка, Источник);
		КонецЦикла;
	Иначе
		ЗарегистрироватьДокумент(ПланыОбмена.ГлавныйУзел(), Источник);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьДокумент(Узел, Источник)
	ПланыОбмена.ЗарегистрироватьИзменения(Узел, Источник);
	Если Источник.Ссылка = Источник Тогда
		ИсточникДвижений = Источник.ПолучитьОбъект();
	Иначе
		ИсточникДвижений = Источник;
	КонецЕсли;
	Для Каждого Движение ИЗ ИсточникДвижений.Движения Цикл
		Движение.Прочитать();
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, Движение);
	КонецЦикла;
КонецПроцедуры

Процедура ЦентральнаяОбработкаОбменаДанными() Экспорт
	
	Если НЕ ОбщийМодуль.ПроверитьКлючСистемы() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДОБАВИТЬКДАТЕ(СостояниеРаботыСистемы.ДатаНачала, МИНУТА, 5) КАК ДатаПроверки
	               |ИЗ
	               |	РегистрСведений.СостояниеРаботыСистемы КАК СостояниеРаботыСистемы
	               |ГДЕ
	               |	СостояниеРаботыСистемы.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияСистемы.ОбменДанными)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ДатаПроверки > ТекущаяДата() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РСНЗ = РегистрыСведений.СостояниеРаботыСистемы.СоздатьНаборЗаписей();
	РСНЗ.Отбор.Состояние.Установить(Перечисления.СостоянияСистемы.ОбменДанными);
	РСНЗ.Прочитать();
	РСНЗ.Очистить();
	Попытка
		РСНЗ.Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Выборка = Справочники.НастройкиОбменаДанными.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПроизводитьОбмен Тогда
			ВыполнитьОбменДанными(Выборка.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	РСНЗ = РегистрыСведений.СостояниеРаботыСистемы.СоздатьНаборЗаписей();
	РСНЗ.Отбор.Состояние.Установить(Перечисления.СостоянияСистемы.ОбменДанными);
	РСНЗ.Прочитать();
	РСНЗ.Очистить();
	Попытка
		РСНЗ.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

Процедура ВыполнитьОбменДанными(Настройка) Экспорт
	
	ВыполнитьОбменДаннымиПоПочте(Настройка);
	
КонецПроцедуры

Процедура ВыполнитьОбменДаннымиПоПочте(Настройка)
	ПочтовыйПрофиль = Новый ИнтернетПочтовыйПрофиль;
	ПочтовыйПрофиль.АдресСервераPOP3 = Настройка.СерверВходящей;
	ПочтовыйПрофиль.АдресСервераSMTP = Настройка.СерверИсходящей;
	ПочтовыйПрофиль.Пароль           = Настройка.Пароль;
	ПочтовыйПрофиль.Пользователь     = Настройка.ИмяПользователя;
	ПочтовыйПрофиль.ПарольSMTP       = Настройка.Пароль;
	ПочтовыйПрофиль.ПользовательSMTP = Настройка.ИмяПользователя;
	УдалятьСообщения = Ложь;
	
	ИнтернетПочта = Новый ИнтернетПочта;

	Попытка
	    ИнтернетПочта.Подключиться(ПочтовыйПрофиль);
	Исключение
	    Сообщить(ОписаниеОшибки());
	    Возврат;
	КонецПопытки;
	
	МассивЗаголовков = ИнтернетПочта.ПолучитьЗаголовки();
	
	Письма = ИнтернетПочта.Выбрать(УдалятьСообщения, МассивЗаголовков);
	
	// ***********************************************
	// Прочитаем данные для обмена
	
	МассивНаУдаление = Новый Массив;
	Для Каждого Письмо ИЗ Письма Цикл
		
		Если Найти(Письмо.Тема, "ОбменДаннымиУзел") = 0 Тогда
			МассивНаУдаление.Добавить(Письмо);
			Продолжить;;
		КонецЕсли;
		
		Если Найти(Письмо.Тема, "ОбменДаннымиУзел" + СокрЛП(Настройка.Узел.Код) + "-" + СокрЛП(ПланыОбмена.Кухни.ЭтотУзел().Код)) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если Письмо.Вложения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Письмо.Вложения.Получить(0).Данные) <> Тип("ДвоичныеДанные") Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
		Письмо.Вложения.Получить(0).Данные.Записать(ИмяВременногоФайла);
		
		МассивНаУдаление.Добавить(Письмо);
		
		ИмяФайлаОбмена = РазархивироватьФайл(ИмяВременногоФайла);
		
		Если ПустаяСтрока(ИмяФайлаОбмена) Тогда
			Продолжить;
		КонецЕсли;
		
		ЧтениеXML = Новый ЧтениеXML;
		Попытка
			ЧтениеXML.ОткрытьФайл(ИмяФайлаОбмена);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ЧтениеСообщения = ПланыОбмена.СоздатьЧтениеСообщения();
		Попытка
			ЧтениеСообщения.НачатьЧтение(ЧтениеXML);
		Исключение
			Сообщить("" + ТекущаяДата() + " Ошибка загрузки данных из узла """ + Настройка.Узел + """. " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
		
		Сообщить("" + ТекущаяДата() + " Начали загрузку данных с узла """ + Настройка.Узел + """");
		Попытка
			ПланыОбмена.ПрочитатьИзменения(ЧтениеСообщения, 0);
		Исключение
			Сообщить("" + ТекущаяДата() + " Ошибка загрузки данных из узла """ + Настройка.Узел + """. " + ОписаниеОшибки(), СтатусСообщения.Важное);
			Продолжить;
		КонецПопытки;
		
		Сообщить("" + ТекущаяДата() + " Закончили загрузку данных с узла """ + Настройка.Узел + """");
		
		Попытка
			ЧтениеСообщения.ЗакончитьЧтение();
		Исключение
		КонецПопытки;
		Попытка
			ЧтениеXML.Закрыть();
		Исключение
		КонецПопытки;
		
		УдалитьФайлы(ИмяВременногоФайла);
		УдалитьФайлы(ИмяФайлаОбмена);
	КонецЦикла;
	
	ИнтернетПочта.УдалитьСообщения(МассивНаУдаление);
	
	// ****************************************
	// Запишем данные для обмена
	
	ИмяФайлаОбмена = ПолучитьИмяВременногоФайла("xml");
	ЗаписьXML = Новый ЗаписьXML;
	Попытка
		ЗаписьXML.ОткрытьФайл(ИмяФайлаОбмена);
	Исключение
		Возврат;
	КонецПопытки;
	ЗаписьСообщения = ПланыОбмена.СоздатьЗаписьСообщения();
	Начали = Ложь;
	
	Сообщить("" + ТекущаяДата() + " Начали отправку данных на узел """ + Настройка.Узел + """");
	
	Пока НЕ Начали Цикл
		Попытка
			ЗаписьСообщения.НачатьЗапись(ЗаписьXML, Настройка.Узел);
			Начали = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
	КонецЦикла;
	// для РИБ изменения в информационной базе
	ПланыОбмена.ЗаписатьИзменения(ЗаписьСообщения);
	// Завершаем запись сообщения
	ЗаписьСообщения.ЗакончитьЗапись();
	ЗаписьXML.Закрыть();
	
	ИмяВременногоФайла = ЗаархивироватьФайл(ИмяФайлаОбмена);
	
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	Сообщение.Вложения.Добавить(ИмяВременногоФайла);
	Сообщение.Тема = "ОбменДаннымиУзел" + СокрЛП(ПланыОбмена.Кухни.ЭтотУзел().Код) + "-" + СокрЛП(Настройка.Узел.Код);
	Сообщение.Получатели.Добавить(Настройка.АдресПочты);
	Сообщение.Отправитель = Настройка.АдресПочты;
	
	Попытка
		ИнтернетПочта.Послать(Сообщение);
	Исключение
		Сообщить("" + Символы.Таб + "Ошибка отправки данных на узел """ + Настройка.Узел + """." + ОписаниеОшибки(), СтатусСообщения.Важное);
	КонецПопытки;
	
	Сообщить("" + ТекущаяДата() + " Закончили отправку данных на узел """ + Настройка.Узел + """");
	
	ИнтернетПочта.Отключиться();
КонецПроцедуры

Функция ЗаархивироватьФайл(ИмяИсходногоФайла)
	Попытка
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("zip");
		Архиватор = Новый ЗаписьZipФайла(ИмяВременногоФайла);
		Архиватор.Добавить(ИмяИсходногоФайла);
		Архиватор.Записать();
	Исключение
		ИмяВременногоФайла = "";
	КонецПопытки;
	Возврат ИмяВременногоФайла;
КонецФункции

// функция разархивирует файл
Функция РазархивироватьФайл(ИмяФайлаАрхива) 
	КаталогДляРаспаковки = КаталогВременныхФайлов();
	ИмяРазархивированногоФайла = "";
	Попытка
		Архиватор = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		Если Архиватор.Элементы.Количество() > 0 Тогда
			Архиватор.Извлечь(Архиватор.Элементы[0], КаталогДляРаспаковки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
			ИмяРазархивированногоФайла = "" + КаталогДляРаспаковки + "\" + Архиватор.Элементы[0].Имя;
		Иначе
			ИмяРазархивированногоФайла = "";
		КонецЕсли;
		Архиватор.Закрыть();
	Исключение
		Сообщить("Ошибка при распаковке данных из архива : " + ОписаниеОшибки());
		Возврат "";					
	КонецПопытки;
	Возврат ИмяРазархивированногоФайла;
КонецФункции
